import com.hp.hpl.jena.rdf.model.ModelFactory
import com.hp.hpl.jena.util.FileManager
import com.hp.hpl.jena.ontology.OntModelSpec
buildscript {
	repositories {
        mavenLocal()
				mavenCentral()
    }
    dependencies {
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
				classpath 'oauth.signpost:signpost-core:1.2.1.2'
				classpath 'oauth.signpost:signpost-commonshttp4:1.2.1.2'
				classpath 'org.apache.jena:jena:2.11.2'
				classpath 'org.apache.jena:jena-arq:2.11.2'
    }
}

task lowercase2015 << {
	doLast {
		String iswc2015ttl = new File('src/iswc2015_metadata_preview.ttl').text
		iswc2015ttl = iswc2015ttl.replaceAll(/(<http:\/\/data\.semanticweb\.org\/organization\/)(.*)>/) { it[1] + it[2].toLowerCase() + '>'}
        iswc2015ttl = iswc2015ttl.replaceAll(/(<http:\/\/data\.semanticweb\.org\/person\/)(.*)>/) { it[1] + it[2].toLowerCase() + '>'}
		new File('target/iswc-2015_metadata_preview.processed.ttl').text = iswc2015ttl
	}
}

task toTtl << {
	def tree = fileTree('src').i tnclude('*.rdf')
	tree.each {File file ->
    	def name = file.name.lastIndexOf('.').with {it != -1 ? file.name[0..<it] : file.name}
    	def ttlFile = new File("target/${name}.ttl")
    	ttlFile.createNewFile()
    	def cmd = "riot --pretty=ttl ${file}"
    	def proc = cmd.execute()
    	proc.in.eachLine {line -> ttlFile.append(line)}
		proc.err.eachLine {line -> println 'ERROR: ' + line}
		proc.waitFor()
	}
}

task upload << {
	def tree = fileTree('target').include('*.ttl')
	tree.each {File file ->
		def name = file.name.lastIndexOf('.').with {it != -1 ? file.name[0..<it] : file.name}
		def cmd = "curl -D- -H 'Content-Type: text/turtle' --upload-file ${file} -X POST 'http://iswc2015.apps.vismart.biz/bigdata/sparql?context-uri=http://${name}'"
		println cmd
		//somehow invoking curl here doesn't do the trick
		//def proc = cmd.execute()
		//proc.in.eachLine {line -> println line}
		//proc.err.eachLine {line -> println 'ERROR: ' + line}
		//proc.waitFor()
	}
}

task unionSplitFollowers << {
	def tree = fileTree('src').include('iswc*followers.json');
	def jsonSlurper = new groovy.json.JsonSlurper()
	def ids = []
	tree.each {File file ->
		def parsed = jsonSlurper.parseText(file.text)
		ids = ids + parsed.ids
	}
	ids = ids.unique()
	def split = ids.collate(100)
	split.eachWithIndex {batch, index ->
		def file = new File("target/followers.${index}.txt")
		file.text = batch
	}
}

task queryProfileData << {
	def tree = fileTree('target').include('followers.*.txt')
	def twitter = twitterClient()
	tree.eachWithIndex{ File file, index ->
		def userIdsFile = file.text
		def userIdsString = userIdsFile.replaceAll("\\[","").replaceAll("\\]", "").replaceAll(" ", "")
		def resp = twitter.get( path : 'users/lookup.json', query: [user_id:userIdsString] )
		def resultFile = new File("target/profiles.${index}.json")
		resultFile.createNewFile()
		resultFile.text = groovy.json.JsonOutput.toJson(resp.data)
	}
}

task queryFriends << {
	def tree = fileTree('target').include('followers.*.txt')

	def twitter = twitterClient()
  tree.eachWithIndex { def idsFile, index ->
		def userIdsFile = idsFile.text
		def userIdsString = userIdsFile.replaceAll("\\[","").replaceAll("\\]", "").replaceAll(" ", "")
		def userIds = userIdsString.tokenize(",")
		def followersFile = new File("target/followers.${index}.json")
		if (!followersFile.exists()) {
			def friends = []
			userIds.eachWithIndex{def id, index2 ->
				def resp = twitter.get( path : 'friends/ids.json', query: [user_id:id] )
				def friendsEntry = [id: id, friends: resp.data.ids]
				friends.add(friendsEntry)
				println "${idsFile.name}:${index2}: ${id}"
				Thread.sleep(65000)
			}
			followersFile.createNewFile()
			followersFile.text = groovy.json.JsonOutput.toJson(friends);
		}
	}
}

task profilesToRdf << {
	def model = ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM)
	def dm =  model.getDocumentManager();
	FileManager.setStdLocators(dm.getFileManager());
	dm.loadImport(model, "http://rdfs.org/sioc/ns")
	def siocPrefix = "http://rdfs.org/sioc/ns#"

	def userAccountClass = model.getOntClass(siocPrefix + "UserAccount")
	def userIdProp = model.getDatatypeProperty(siocPrefix + "id")
	def avatarProp = model.getObjectProperty(siocPrefix + "avatar")
	def followsProp = model.getObjectProperty(siocPrefix + "follows")
	def nameProp = model.getDatatypeProperty(siocPrefix + "name")
  	def noteProperty = model.getDatatypeProperty(siocPrefix + "note")

	def jsonSlurper = new groovy.json.JsonSlurper()
	def profiles = jsonSlurper.parseText(new File("target/profiles.json").text)
	profiles.each {profile->
			def userAccount = model.createIndividual("http://iswc2015.apps.vismart.biz/profiles/" + profile.id, userAccountClass);
			userAccount.addLiteral(userIdProp, profile.id);
			userAccount.addProperty(avatarProp, profile.profile_image_url)
			userAccount.addLiteral(nameProp, profile.name);
			userAccount.addLiteral(noteProperty, profile.description);
	}

	FileWriter fileWriter = new FileWriter("target/profiles.ttl");
  model.write(fileWriter, "Turtle");
  fileWriter.close();
}

task gatherProfiles << {
	def profilesList = fileTree('target').include('profiles.*.json')
	def jsonSlurper = new groovy.json.JsonSlurper()
	def profiles = []
	profilesList.each {File file->
		def parsed = jsonSlurper.parseText(file.text)
		profiles = profiles + parsed
	}
	def allProfiles = new File('target/profiles.json')
	allProfiles.createNewFile()
	allProfiles.text = groovy.json.JsonOutput.toJson(profiles)
}

def twitterClient() {
	def twitter = new groovyx.net.http.RESTClient( 'https://api.twitter.com/1.1/' )
	twitter.auth.oauth iswcTwitterConsumerKey, iswcTwitterConsumerSecret, iswcTwitterAccessToken, iswcTwitterAccessTokenSecret
	return twitter
}
